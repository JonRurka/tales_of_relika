#version 450

#include "../include/samplers/Terrain_Sampler.inc"

struct Data{
	vec4 values;
};

struct Static_Settings{
    vec4 VoxelsPerMeter;
    ivec4 ChunkMeterSize;
    ivec4 ChunkSize;
    ivec4 FullChunkSize;
    vec4 skipDist;
    vec4 half_;
    vec4 SideLength;
    ivec4 batches;
};

struct Run_Settings{
    ivec4 Location;
};

layout(std140, binding = 0) buffer readonly SSBO_Static_Settings_In{
	Static_Settings in_static_settings[ ];
};

layout(std140, binding = 1) buffer readonly SSBO_Run_Settings_In{
	Run_Settings in_run_settings[ ];
};

layout(std140, binding = 2) buffer SSBO_Out{
	Data out_data[ ];
};

layout(std140, binding = 3) buffer SSBO_debug_Out{
	Data out_debug_data[ ];
};

int GetVoxelIndex(int batch, int g_index, int size){
    return (g_index % size);
}

int GetBatchIndex(int batch, int v_index, int size){
    return (batch * size) + v_index;
}

float sphere_sample(float radius, float x, float y, float z){

    vec3 sphere_center = vec3(16, 16, 16);

    return radius - sqrt(pow(x - sphere_center.x, 2) + pow(y - sphere_center.y, 2) + pow(z - sphere_center.z, 2));
}

float iso_sample(float x, float y, float z, Settings s){

    return Sample_3D(s, x, y, z);

    //float radius = 10;

    //return sphere_sample(radius, x, y, z);
}

float iso_sample(vec3 p, Settings s){
    return iso_sample(p.x, p.y, p.z,  s);
}

vec3 normal_sample(float x, float y, float z, float centerDistance, Settings s){
    vec3 p = vec3(x, y, z);
    float epsilon = 0.001; // arbitrary â€” should be smaller than any surface detail in your distance function, but not so small as to get lost in float precision
    //float centerDistance = iso_sample(p);
    float xDistance = iso_sample(p + vec3(epsilon, 0, 0), s);
    float yDistance = iso_sample(p + vec3(0, epsilon, 0), s);
    float zDistance = iso_sample(p + vec3(0, 0, epsilon), s);
    vec3 normal = (vec3(xDistance - centerDistance, yDistance - centerDistance, zDistance - centerDistance)) / epsilon;
    return normal;
}


ivec3 C_1D_to_3D(int i, int width, int height) {
	int z = i / (width * height);
	int y = (i % (width * height)) / width;
	int x = i % width;

	return ivec3(x, y, z);
}

int C_3D_to_1D(int x, int y, int z, int width, int height) {
	return z * width * height + y * width + x;
}

float getISOval(uint index){
    uint buffer_index = index / 4;
	uint access_index = index % 4;

    float val = 0;//in_data[buffer_index].values[access_index];

    return val;
}

void setISOval(int index, float iso, vec3 normal){
    out_data[index].values = vec4(normal.x, normal.y, normal.z, iso);

    //uint buffer_index = index / 4;
	//uint access_index = index % 4;
	
	//out_data[buffer_index].values[access_index] = value;
}

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint index = gl_GlobalInvocationID.x;

    Static_Settings static_settings = in_static_settings[0];

    int inst_index = int(index) / static_settings.FullChunkSize[1];
    Run_Settings run_settings = in_run_settings[inst_index];

    int ChunkSizeX = static_settings.ChunkSize.x;
    int ChunkSizeY = static_settings.ChunkSize.y;
    int ChunkSizeZ = static_settings.ChunkSize.z;

    int FullChunkSize = (ChunkSizeX) * (ChunkSizeY) * (ChunkSizeZ);
    int FullChunkSize_exp = (ChunkSizeX + 2) * (ChunkSizeY + 2) * (ChunkSizeZ + 2);

    int numBatchesPerGroup = static_settings.batches[0];

    if (run_settings.Location.w == -1 || index >= (FullChunkSize_exp * numBatchesPerGroup)){
        return;
    }

    int batchIndex = run_settings.Location.w;
    int batchIndexExpanded = run_settings.Location.w;
    ivec4 batch = ivec4(batchIndex, batchIndexExpanded, static_settings.FullChunkSize[0], FullChunkSize_exp);

    int voxel_index = GetVoxelIndex(batchIndexExpanded, int(index), batch[3]);


    float xSideLength = static_settings.SideLength.x;
    float ySideLength = static_settings.SideLength.y;
    float zSideLength = static_settings.SideLength.z;
	
    ivec3 index_pos = C_1D_to_3D(int(voxel_index), ChunkSizeX + 2, ChunkSizeZ + 2);

    // Coordinate of voxel in chunk
    int x = index_pos.x;
    int y = index_pos.y;
    int z = index_pos.z;

    // Coordinate of Chunk
    int cx = run_settings.Location.x;
    int cy = run_settings.Location.y;
    int cz = run_settings.Location.z;

    // Global coordinate of first voxel in chunk.
    int xStart = cx * ChunkSizeX;
    int yStart = cy * ChunkSizeY;
    int zStart = cz * ChunkSizeZ;

    // World position of voxel relative to chunk
    float xLocalWorld = x * xSideLength;
    float yLocalWorld = y * ySideLength;
    float zLocalWorld = z * zSideLength;
    vec3 pos_localWorld = vec3(xLocalWorld, yLocalWorld, zLocalWorld);

    // World position of voxel relative to world origin
    float xWorldOrigin = (xStart * xSideLength) + xLocalWorld;
    float yWorldOrigin = (yStart * ySideLength) + yLocalWorld;
    float zWorldOrigin = (zStart * zSideLength) + zLocalWorld;
    vec3 pos_originWorld = vec3(xWorldOrigin, yWorldOrigin, zWorldOrigin);

    Settings s;
    s.ChunkSizeX = ChunkSizeX + 2;
    s.ChunkSizeY = ChunkSizeY + 2;
    s.ChunkSizeZ = ChunkSizeZ + 2;
    s.VoxelsPerMeter = static_settings.VoxelsPerMeter[0];


    float iso = iso_sample(pos_originWorld.x, pos_originWorld.y, pos_originWorld.z, s);
    vec3 normal = vec3(0,0,0);//-normal_sample(pos_originWorld.x, pos_originWorld.y, pos_originWorld.z, iso);

    //setISOval(int(index), iso, vec3(voxel_index, batchIndexExpanded, GetBatchIndex(batchIndexExpanded, voxel_index, batch[3])));
    //setISOval(GetBatchIndex(batchIndexExpanded, voxel_index, batch[3]), iso, vec3(voxel_index, batchIndexExpanded, run_settings.Location.w));
    setISOval(GetBatchIndex((batchIndexExpanded % static_settings.batches[0]), voxel_index, batch[3]), iso, normal);
}